/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ClockAuctionContractInterface extends utils.Interface {
  contractName: "ClockAuctionContract";
  functions: {
    "admin()": FunctionFragment;
    "auctions(address,uint256)": FunctionFragment;
    "cancelAuction(uint256)": FunctionFragment;
    "cancelTokenAuction(uint256,address)": FunctionFragment;
    "changeAdmin(address)": FunctionFragment;
    "createAuction(uint8[],address[],uint256[],uint256[],uint256[],address[],uint256[])": FunctionFragment;
    "exchangeContract()": FunctionFragment;
    "getCurrentPrices(address,uint256)": FunctionFragment;
    "getTokenAuctions(address,uint256)": FunctionFragment;
    "getTokenAuctionsCount(address,uint256)": FunctionFragment;
    "isAuctionExisting(address,uint256)": FunctionFragment;
    "ownerCut()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "removeAdmin()": FunctionFragment;
    "revalidateAuction(address,uint256)": FunctionFragment;
    "revalidateRelatedAuctions(uint256)": FunctionFragment;
    "setOwnerCut(uint256)": FunctionFragment;
    "setTokenMaxOccurrences(uint256)": FunctionFragment;
    "settleAuction(address,address,uint256,uint256,uint256)": FunctionFragment;
    "tokenMaxOccurrences()": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateExchangeContract(address)": FunctionFragment;
    "withdrawEther()": FunctionFragment;
    "withdrawToken(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "auctions",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTokenAuction",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "changeAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [
      BigNumberish[],
      string[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      string[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPrices",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAuctions",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAuctionsCount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuctionExisting",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ownerCut", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revalidateAuction",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revalidateRelatedAuctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwnerCut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenMaxOccurrences",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settleAuction",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenMaxOccurrences",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateExchangeContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEther",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelTokenAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAuctionsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuctionExisting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerCut", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revalidateAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revalidateRelatedAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOwnerCut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenMaxOccurrences",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenMaxOccurrences",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateExchangeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "AdminRemoved(address)": EventFragment;
    "AuctionCancelled(address,uint256)": EventFragment;
    "AuctionCreated(address,uint256,uint256[],uint256[],address[],uint256[],uint256)": EventFragment;
    "AuctionSuccessful(address,address,uint256,address,uint256)": EventFragment;
    "Paused()": EventFragment;
    "TokenAuctionCancelled(address,uint256,address)": EventFragment;
    "Unpaused()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionSuccessful"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAuctionCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { _oldAdmin: string; _newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type AdminRemovedEvent = TypedEvent<[string], { _oldAdmin: string }>;

export type AdminRemovedEventFilter = TypedEventFilter<AdminRemovedEvent>;

export type AuctionCancelledEvent = TypedEvent<
  [string, BigNumber],
  { _seller: string; _listingIndex: BigNumber }
>;

export type AuctionCancelledEventFilter =
  TypedEventFilter<AuctionCancelledEvent>;

export type AuctionCreatedEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber[],
    BigNumber[],
    string[],
    BigNumber[],
    BigNumber
  ],
  {
    _seller: string;
    _listingIndex: BigNumber;
    _startingPrices: BigNumber[];
    _endingPrices: BigNumber[];
    _exchangeTokens: string[];
    _durations: BigNumber[];
    _startingTimestamps: BigNumber;
  }
>;

export type AuctionCreatedEventFilter = TypedEventFilter<AuctionCreatedEvent>;

export type AuctionSuccessfulEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  {
    _seller: string;
    _buyer: string;
    _listingIndex: BigNumber;
    _token: string;
    _totalPrice: BigNumber;
  }
>;

export type AuctionSuccessfulEventFilter =
  TypedEventFilter<AuctionSuccessfulEvent>;

export type PausedEvent = TypedEvent<[], {}>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type TokenAuctionCancelledEvent = TypedEvent<
  [string, BigNumber, string],
  { _seller: string; _listingIndex: BigNumber; _exchangeTokens: string }
>;

export type TokenAuctionCancelledEventFilter =
  TypedEventFilter<TokenAuctionCancelledEvent>;

export type UnpausedEvent = TypedEvent<[], {}>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface ClockAuctionContract extends BaseContract {
  contractName: "ClockAuctionContract";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ClockAuctionContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    auctions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { seller: string }>;

    cancelAuction(
      _listingIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelTokenAuction(
      _listingIndex: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createAuction(uint8[],address[],uint256[],uint256[],uint256[],address[],uint256[])"(
      _tokenTypes: BigNumberish[],
      _tokenAddresses: string[],
      _tokenNumbers: BigNumberish[],
      _startingPrices: BigNumberish[],
      _endingPrices: BigNumberish[],
      _exchangeTokens: string[],
      _durations: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createAuction(uint256,uint256[],uint256[],address[],uint256[])"(
      _listingIndex: BigNumberish,
      _startingPrices: BigNumberish[],
      _endingPrices: BigNumberish[],
      _exchangeTokens: string[],
      _durations: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangeContract(overrides?: CallOverrides): Promise<[string]>;

    getCurrentPrices(
      _seller: string,
      _listingIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getTokenAuctions(
      _tokenAddress: string,
      _tokenNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & {
        _sellers: string[];
        _listingIndexes: BigNumber[];
      }
    >;

    getTokenAuctionsCount(
      _tokenAddress: string,
      _tokenNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isAuctionExisting(
      _seller: string,
      _listingIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ownerCut(overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    removeAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revalidateAuction(
      _seller: string,
      _listingIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revalidateRelatedAuctions(
      _listingIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwnerCut(
      _newOwnerCut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenMaxOccurrences(
      _tokenMaxOccurrences: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleAuction(
      _seller: string,
      _token: string,
      _bidAmount: BigNumberish,
      _listingIndex: BigNumberish,
      _listingState: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenMaxOccurrences(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateExchangeContract(
      _exchangeContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawEther(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  auctions(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  cancelAuction(
    _listingIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelTokenAuction(
    _listingIndex: BigNumberish,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeAdmin(
    _newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createAuction(uint8[],address[],uint256[],uint256[],uint256[],address[],uint256[])"(
    _tokenTypes: BigNumberish[],
    _tokenAddresses: string[],
    _tokenNumbers: BigNumberish[],
    _startingPrices: BigNumberish[],
    _endingPrices: BigNumberish[],
    _exchangeTokens: string[],
    _durations: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createAuction(uint256,uint256[],uint256[],address[],uint256[])"(
    _listingIndex: BigNumberish,
    _startingPrices: BigNumberish[],
    _endingPrices: BigNumberish[],
    _exchangeTokens: string[],
    _durations: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangeContract(overrides?: CallOverrides): Promise<string>;

  getCurrentPrices(
    _seller: string,
    _listingIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  getTokenAuctions(
    _tokenAddress: string,
    _tokenNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & {
      _sellers: string[];
      _listingIndexes: BigNumber[];
    }
  >;

  getTokenAuctionsCount(
    _tokenAddress: string,
    _tokenNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isAuctionExisting(
    _seller: string,
    _listingIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ownerCut(overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  removeAdmin(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revalidateAuction(
    _seller: string,
    _listingIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revalidateRelatedAuctions(
    _listingIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwnerCut(
    _newOwnerCut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenMaxOccurrences(
    _tokenMaxOccurrences: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleAuction(
    _seller: string,
    _token: string,
    _bidAmount: BigNumberish,
    _listingIndex: BigNumberish,
    _listingState: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenMaxOccurrences(overrides?: CallOverrides): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateExchangeContract(
    _exchangeContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawEther(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawToken(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    auctions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    cancelAuction(
      _listingIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelTokenAuction(
      _listingIndex: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeAdmin(_newAdmin: string, overrides?: CallOverrides): Promise<void>;

    "createAuction(uint8[],address[],uint256[],uint256[],uint256[],address[],uint256[])"(
      _tokenTypes: BigNumberish[],
      _tokenAddresses: string[],
      _tokenNumbers: BigNumberish[],
      _startingPrices: BigNumberish[],
      _endingPrices: BigNumberish[],
      _exchangeTokens: string[],
      _durations: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "createAuction(uint256,uint256[],uint256[],address[],uint256[])"(
      _listingIndex: BigNumberish,
      _startingPrices: BigNumberish[],
      _endingPrices: BigNumberish[],
      _exchangeTokens: string[],
      _durations: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    exchangeContract(overrides?: CallOverrides): Promise<string>;

    getCurrentPrices(
      _seller: string,
      _listingIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getTokenAuctions(
      _tokenAddress: string,
      _tokenNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & {
        _sellers: string[];
        _listingIndexes: BigNumber[];
      }
    >;

    getTokenAuctionsCount(
      _tokenAddress: string,
      _tokenNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAuctionExisting(
      _seller: string,
      _listingIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ownerCut(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    removeAdmin(overrides?: CallOverrides): Promise<void>;

    revalidateAuction(
      _seller: string,
      _listingIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    revalidateRelatedAuctions(
      _listingIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwnerCut(
      _newOwnerCut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenMaxOccurrences(
      _tokenMaxOccurrences: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settleAuction(
      _seller: string,
      _token: string,
      _bidAmount: BigNumberish,
      _listingIndex: BigNumberish,
      _listingState: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenMaxOccurrences(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateExchangeContract(
      _exchangeContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawEther(overrides?: CallOverrides): Promise<void>;

    withdrawToken(_token: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      _oldAdmin?: string | null,
      _newAdmin?: string | null
    ): AdminChangedEventFilter;
    AdminChanged(
      _oldAdmin?: string | null,
      _newAdmin?: string | null
    ): AdminChangedEventFilter;

    "AdminRemoved(address)"(_oldAdmin?: string | null): AdminRemovedEventFilter;
    AdminRemoved(_oldAdmin?: string | null): AdminRemovedEventFilter;

    "AuctionCancelled(address,uint256)"(
      _seller?: null,
      _listingIndex?: null
    ): AuctionCancelledEventFilter;
    AuctionCancelled(
      _seller?: null,
      _listingIndex?: null
    ): AuctionCancelledEventFilter;

    "AuctionCreated(address,uint256,uint256[],uint256[],address[],uint256[],uint256)"(
      _seller?: null,
      _listingIndex?: null,
      _startingPrices?: null,
      _endingPrices?: null,
      _exchangeTokens?: null,
      _durations?: null,
      _startingTimestamps?: null
    ): AuctionCreatedEventFilter;
    AuctionCreated(
      _seller?: null,
      _listingIndex?: null,
      _startingPrices?: null,
      _endingPrices?: null,
      _exchangeTokens?: null,
      _durations?: null,
      _startingTimestamps?: null
    ): AuctionCreatedEventFilter;

    "AuctionSuccessful(address,address,uint256,address,uint256)"(
      _seller?: null,
      _buyer?: null,
      _listingIndex?: null,
      _token?: null,
      _totalPrice?: null
    ): AuctionSuccessfulEventFilter;
    AuctionSuccessful(
      _seller?: null,
      _buyer?: null,
      _listingIndex?: null,
      _token?: null,
      _totalPrice?: null
    ): AuctionSuccessfulEventFilter;

    "Paused()"(): PausedEventFilter;
    Paused(): PausedEventFilter;

    "TokenAuctionCancelled(address,uint256,address)"(
      _seller?: null,
      _listingIndex?: null,
      _exchangeTokens?: null
    ): TokenAuctionCancelledEventFilter;
    TokenAuctionCancelled(
      _seller?: null,
      _listingIndex?: null,
      _exchangeTokens?: null
    ): TokenAuctionCancelledEventFilter;

    "Unpaused()"(): UnpausedEventFilter;
    Unpaused(): UnpausedEventFilter;
  };

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    auctions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelAuction(
      _listingIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelTokenAuction(
      _listingIndex: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createAuction(uint8[],address[],uint256[],uint256[],uint256[],address[],uint256[])"(
      _tokenTypes: BigNumberish[],
      _tokenAddresses: string[],
      _tokenNumbers: BigNumberish[],
      _startingPrices: BigNumberish[],
      _endingPrices: BigNumberish[],
      _exchangeTokens: string[],
      _durations: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createAuction(uint256,uint256[],uint256[],address[],uint256[])"(
      _listingIndex: BigNumberish,
      _startingPrices: BigNumberish[],
      _endingPrices: BigNumberish[],
      _exchangeTokens: string[],
      _durations: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangeContract(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPrices(
      _seller: string,
      _listingIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenAuctions(
      _tokenAddress: string,
      _tokenNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenAuctionsCount(
      _tokenAddress: string,
      _tokenNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAuctionExisting(
      _seller: string,
      _listingIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerCut(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    removeAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revalidateAuction(
      _seller: string,
      _listingIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revalidateRelatedAuctions(
      _listingIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwnerCut(
      _newOwnerCut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenMaxOccurrences(
      _tokenMaxOccurrences: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleAuction(
      _seller: string,
      _token: string,
      _bidAmount: BigNumberish,
      _listingIndex: BigNumberish,
      _listingState: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenMaxOccurrences(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateExchangeContract(
      _exchangeContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawEther(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelAuction(
      _listingIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelTokenAuction(
      _listingIndex: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createAuction(uint8[],address[],uint256[],uint256[],uint256[],address[],uint256[])"(
      _tokenTypes: BigNumberish[],
      _tokenAddresses: string[],
      _tokenNumbers: BigNumberish[],
      _startingPrices: BigNumberish[],
      _endingPrices: BigNumberish[],
      _exchangeTokens: string[],
      _durations: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createAuction(uint256,uint256[],uint256[],address[],uint256[])"(
      _listingIndex: BigNumberish,
      _startingPrices: BigNumberish[],
      _endingPrices: BigNumberish[],
      _exchangeTokens: string[],
      _durations: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangeContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentPrices(
      _seller: string,
      _listingIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenAuctions(
      _tokenAddress: string,
      _tokenNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenAuctionsCount(
      _tokenAddress: string,
      _tokenNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAuctionExisting(
      _seller: string,
      _listingIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerCut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revalidateAuction(
      _seller: string,
      _listingIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revalidateRelatedAuctions(
      _listingIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwnerCut(
      _newOwnerCut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenMaxOccurrences(
      _tokenMaxOccurrences: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleAuction(
      _seller: string,
      _token: string,
      _bidAmount: BigNumberish,
      _listingIndex: BigNumberish,
      _listingState: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenMaxOccurrences(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateExchangeContract(
      _exchangeContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawEther(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
