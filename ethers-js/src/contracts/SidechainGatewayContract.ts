/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace SidechainGatewayStorage {
  export type WithdrawalEntryStruct = {
    owner: string;
    tokenAddress: string;
    mainchainAddress: string;
    standard: BigNumberish;
    tokenNumber: BigNumberish;
  };

  export type WithdrawalEntryStructOutput = [
    string,
    string,
    string,
    number,
    BigNumber
  ] & {
    owner: string;
    tokenAddress: string;
    mainchainAddress: string;
    standard: number;
    tokenNumber: BigNumber;
  };
}

export interface SidechainGatewayContractInterface extends utils.Interface {
  contractName: "SidechainGatewayContract";
  functions: {
    "acknowledWithdrawalOnMainchain(uint256)": FunctionFragment;
    "admin()": FunctionFragment;
    "changeAdmin(address)": FunctionFragment;
    "depositERCTokenFor(uint256,address,address,uint32,uint256)": FunctionFragment;
    "deposits(uint256)": FunctionFragment;
    "getPendingWithdrawals(address)": FunctionFragment;
    "getWithdrawalSignatures(uint256)": FunctionFragment;
    "getWithdrawalSigners(uint256)": FunctionFragment;
    "maxPendingWithdrawal()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "registry()": FunctionFragment;
    "removeAdmin()": FunctionFragment;
    "requestSignatureAgain(uint256)": FunctionFragment;
    "submitWithdrawalSignatures(uint256,bool,bytes)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateMaxPendingWithdrawal(uint256)": FunctionFragment;
    "updateRegistry(address)": FunctionFragment;
    "withdrawERC20(address,uint256)": FunctionFragment;
    "withdrawERC20For(address,address,uint256)": FunctionFragment;
    "withdrawERC721(address,uint256)": FunctionFragment;
    "withdrawETH(uint256)": FunctionFragment;
    "withdrawalCount()": FunctionFragment;
    "withdrawalERC721For(address,address,uint256)": FunctionFragment;
    "withdrawalSig(uint256,address)": FunctionFragment;
    "withdrawalSigners(uint256,uint256)": FunctionFragment;
    "withdrawals(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acknowledWithdrawalOnMainchain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "changeAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "depositERCTokenFor",
    values: [BigNumberish, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingWithdrawals",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawalSignatures",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawalSigners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxPendingWithdrawal",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestSignatureAgain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitWithdrawalSignatures",
    values: [BigNumberish, boolean, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateMaxPendingWithdrawal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20For",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC721",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalERC721For",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalSig",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalSigners",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawals",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acknowledWithdrawalOnMainchain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERCTokenFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPendingWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawalSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawalSigners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPendingWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestSignatureAgain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitWithdrawalSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxPendingWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20For",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalERC721For",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalSigners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawals",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "AdminRemoved(address)": EventFragment;
    "Paused()": EventFragment;
    "RequestTokenWithdrawalSigAgain(uint256,address,address,address,uint32,uint256)": EventFragment;
    "TokenDeposited(uint256,address,address,uint256)": EventFragment;
    "TokenWithdrew(uint256,address,address,address,uint32,uint256)": EventFragment;
    "Unpaused()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RequestTokenWithdrawalSigAgain"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenWithdrew"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { _oldAdmin: string; _newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type AdminRemovedEvent = TypedEvent<[string], { _oldAdmin: string }>;

export type AdminRemovedEventFilter = TypedEventFilter<AdminRemovedEvent>;

export type PausedEvent = TypedEvent<[], {}>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type RequestTokenWithdrawalSigAgainEvent = TypedEvent<
  [BigNumber, string, string, string, number, BigNumber],
  {
    _withdrawalId: BigNumber;
    _owner: string;
    _tokenAddress: string;
    _mainchainAddress: string;
    _standard: number;
    _tokenNumber: BigNumber;
  }
>;

export type RequestTokenWithdrawalSigAgainEventFilter =
  TypedEventFilter<RequestTokenWithdrawalSigAgainEvent>;

export type TokenDepositedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  {
    depositId: BigNumber;
    owner: string;
    tokenAddress: string;
    tokenNumber: BigNumber;
  }
>;

export type TokenDepositedEventFilter = TypedEventFilter<TokenDepositedEvent>;

export type TokenWithdrewEvent = TypedEvent<
  [BigNumber, string, string, string, number, BigNumber],
  {
    _withdrawId: BigNumber;
    _owner: string;
    _tokenAddress: string;
    _mainchainAddress: string;
    _standard: number;
    _tokenNumber: BigNumber;
  }
>;

export type TokenWithdrewEventFilter = TypedEventFilter<TokenWithdrewEvent>;

export type UnpausedEvent = TypedEvent<[], {}>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface SidechainGatewayContract extends BaseContract {
  contractName: "SidechainGatewayContract";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SidechainGatewayContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acknowledWithdrawalOnMainchain(
      _withdrawalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    changeAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositERCTokenFor(
      _depositId: BigNumberish,
      _owner: string,
      _token: string,
      _standard: BigNumberish,
      _tokenNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        owner: string;
        tokenAddress: string;
        tokenNumber: BigNumber;
      }
    >;

    getPendingWithdrawals(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], SidechainGatewayStorage.WithdrawalEntryStructOutput[]] & {
        ids: BigNumber[];
        entries: SidechainGatewayStorage.WithdrawalEntryStructOutput[];
      }
    >;

    getWithdrawalSignatures(
      _withdrawalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string[]] & { _signers: string[]; _sigs: string[] }>;

    getWithdrawalSigners(
      _withdrawalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    maxPendingWithdrawal(overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    removeAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestSignatureAgain(
      _withdrawalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitWithdrawalSignatures(
      _withdrawalId: BigNumberish,
      _shouldReplace: boolean,
      _sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMaxPendingWithdrawal(
      _maxPendingWithdrawal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRegistry(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawERC20(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawERC20For(
      _owner: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawERC721(
      _token: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawETH(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawalCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawalERC721For(
      _owner: string,
      _token: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawalSig(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    withdrawalSigners(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    withdrawals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number, BigNumber] & {
        owner: string;
        tokenAddress: string;
        mainchainAddress: string;
        standard: number;
        tokenNumber: BigNumber;
      }
    >;
  };

  acknowledWithdrawalOnMainchain(
    _withdrawalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  changeAdmin(
    _newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositERCTokenFor(
    _depositId: BigNumberish,
    _owner: string,
    _token: string,
    _standard: BigNumberish,
    _tokenNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposits(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      owner: string;
      tokenAddress: string;
      tokenNumber: BigNumber;
    }
  >;

  getPendingWithdrawals(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], SidechainGatewayStorage.WithdrawalEntryStructOutput[]] & {
      ids: BigNumber[];
      entries: SidechainGatewayStorage.WithdrawalEntryStructOutput[];
    }
  >;

  getWithdrawalSignatures(
    _withdrawalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], string[]] & { _signers: string[]; _sigs: string[] }>;

  getWithdrawalSigners(
    _withdrawalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  maxPendingWithdrawal(overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  registry(overrides?: CallOverrides): Promise<string>;

  removeAdmin(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestSignatureAgain(
    _withdrawalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitWithdrawalSignatures(
    _withdrawalId: BigNumberish,
    _shouldReplace: boolean,
    _sig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMaxPendingWithdrawal(
    _maxPendingWithdrawal: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRegistry(
    _registry: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawERC20(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawERC20For(
    _owner: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawERC721(
    _token: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawETH(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawalCount(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawalERC721For(
    _owner: string,
    _token: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawalSig(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  withdrawalSigners(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  withdrawals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, number, BigNumber] & {
      owner: string;
      tokenAddress: string;
      mainchainAddress: string;
      standard: number;
      tokenNumber: BigNumber;
    }
  >;

  callStatic: {
    acknowledWithdrawalOnMainchain(
      _withdrawalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    changeAdmin(_newAdmin: string, overrides?: CallOverrides): Promise<void>;

    depositERCTokenFor(
      _depositId: BigNumberish,
      _owner: string,
      _token: string,
      _standard: BigNumberish,
      _tokenNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        owner: string;
        tokenAddress: string;
        tokenNumber: BigNumber;
      }
    >;

    getPendingWithdrawals(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], SidechainGatewayStorage.WithdrawalEntryStructOutput[]] & {
        ids: BigNumber[];
        entries: SidechainGatewayStorage.WithdrawalEntryStructOutput[];
      }
    >;

    getWithdrawalSignatures(
      _withdrawalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string[]] & { _signers: string[]; _sigs: string[] }>;

    getWithdrawalSigners(
      _withdrawalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    maxPendingWithdrawal(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    registry(overrides?: CallOverrides): Promise<string>;

    removeAdmin(overrides?: CallOverrides): Promise<void>;

    requestSignatureAgain(
      _withdrawalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    submitWithdrawalSignatures(
      _withdrawalId: BigNumberish,
      _shouldReplace: boolean,
      _sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateMaxPendingWithdrawal(
      _maxPendingWithdrawal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRegistry(_registry: string, overrides?: CallOverrides): Promise<void>;

    withdrawERC20(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawERC20For(
      _owner: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawERC721(
      _token: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawETH(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawalCount(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalERC721For(
      _owner: string,
      _token: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawalSig(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    withdrawalSigners(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    withdrawals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number, BigNumber] & {
        owner: string;
        tokenAddress: string;
        mainchainAddress: string;
        standard: number;
        tokenNumber: BigNumber;
      }
    >;
  };

  filters: {
    "AdminChanged(address,address)"(
      _oldAdmin?: string | null,
      _newAdmin?: string | null
    ): AdminChangedEventFilter;
    AdminChanged(
      _oldAdmin?: string | null,
      _newAdmin?: string | null
    ): AdminChangedEventFilter;

    "AdminRemoved(address)"(_oldAdmin?: string | null): AdminRemovedEventFilter;
    AdminRemoved(_oldAdmin?: string | null): AdminRemovedEventFilter;

    "Paused()"(): PausedEventFilter;
    Paused(): PausedEventFilter;

    "RequestTokenWithdrawalSigAgain(uint256,address,address,address,uint32,uint256)"(
      _withdrawalId?: BigNumberish | null,
      _owner?: string | null,
      _tokenAddress?: string | null,
      _mainchainAddress?: null,
      _standard?: null,
      _tokenNumber?: null
    ): RequestTokenWithdrawalSigAgainEventFilter;
    RequestTokenWithdrawalSigAgain(
      _withdrawalId?: BigNumberish | null,
      _owner?: string | null,
      _tokenAddress?: string | null,
      _mainchainAddress?: null,
      _standard?: null,
      _tokenNumber?: null
    ): RequestTokenWithdrawalSigAgainEventFilter;

    "TokenDeposited(uint256,address,address,uint256)"(
      depositId?: BigNumberish | null,
      owner?: string | null,
      tokenAddress?: string | null,
      tokenNumber?: null
    ): TokenDepositedEventFilter;
    TokenDeposited(
      depositId?: BigNumberish | null,
      owner?: string | null,
      tokenAddress?: string | null,
      tokenNumber?: null
    ): TokenDepositedEventFilter;

    "TokenWithdrew(uint256,address,address,address,uint32,uint256)"(
      _withdrawId?: BigNumberish | null,
      _owner?: string | null,
      _tokenAddress?: string | null,
      _mainchainAddress?: null,
      _standard?: null,
      _tokenNumber?: null
    ): TokenWithdrewEventFilter;
    TokenWithdrew(
      _withdrawId?: BigNumberish | null,
      _owner?: string | null,
      _tokenAddress?: string | null,
      _mainchainAddress?: null,
      _standard?: null,
      _tokenNumber?: null
    ): TokenWithdrewEventFilter;

    "Unpaused()"(): UnpausedEventFilter;
    Unpaused(): UnpausedEventFilter;
  };

  estimateGas: {
    acknowledWithdrawalOnMainchain(
      _withdrawalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    changeAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositERCTokenFor(
      _depositId: BigNumberish,
      _owner: string,
      _token: string,
      _standard: BigNumberish,
      _tokenNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposits(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getPendingWithdrawals(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawalSignatures(
      _withdrawalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawalSigners(
      _withdrawalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxPendingWithdrawal(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    removeAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestSignatureAgain(
      _withdrawalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitWithdrawalSignatures(
      _withdrawalId: BigNumberish,
      _shouldReplace: boolean,
      _sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMaxPendingWithdrawal(
      _maxPendingWithdrawal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRegistry(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawERC20(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawERC20For(
      _owner: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawERC721(
      _token: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawETH(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawalCount(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalERC721For(
      _owner: string,
      _token: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawalSig(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawalSigners(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acknowledWithdrawalOnMainchain(
      _withdrawalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositERCTokenFor(
      _depositId: BigNumberish,
      _owner: string,
      _token: string,
      _standard: BigNumberish,
      _tokenNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingWithdrawals(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawalSignatures(
      _withdrawalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawalSigners(
      _withdrawalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPendingWithdrawal(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestSignatureAgain(
      _withdrawalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitWithdrawalSignatures(
      _withdrawalId: BigNumberish,
      _shouldReplace: boolean,
      _sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMaxPendingWithdrawal(
      _maxPendingWithdrawal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRegistry(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC20(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC20For(
      _owner: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC721(
      _token: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawETH(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawalCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawalERC721For(
      _owner: string,
      _token: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawalSig(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawalSigners(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
