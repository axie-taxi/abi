/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface RoninRewardDistributorInterface extends utils.Interface {
  contractName: "RoninRewardDistributor";
  functions: {
    "addRewardToken(uint256,address,uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
    "paused()": FunctionFragment;
    "withdrawEther()": FunctionFragment;
    "rewardMap(uint256)": FunctionFragment;
    "pause()": FunctionFragment;
    "withdrawToken(address)": FunctionFragment;
    "changeAdmin(address)": FunctionFragment;
    "removeAdmin()": FunctionFragment;
    "operator(address)": FunctionFragment;
    "addOperators(address[])": FunctionFragment;
    "claim(address,uint256,uint256,uint256,bytes)": FunctionFragment;
    "removeOperators(address[])": FunctionFragment;
    "operators(uint256)": FunctionFragment;
    "getClaimed(address,uint256)": FunctionFragment;
    "admin()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addRewardToken",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawEther",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardMap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "changeAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "operator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addOperators",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOperators",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "operators",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimed",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardMap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getClaimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;

  events: {
    "RewardClaimed(address,uint256,uint256)": EventFragment;
    "Paused()": EventFragment;
    "Unpaused()": EventFragment;
    "OperatorAdded(address)": EventFragment;
    "OperatorRemoved(address)": EventFragment;
    "AdminChanged(address,address)": EventFragment;
    "AdminRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminRemoved"): EventFragment;
}

export type RewardClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { _owner: string; _rewardId: BigNumber; _total: BigNumber }
>;

export type RewardClaimedEventFilter = TypedEventFilter<RewardClaimedEvent>;

export type PausedEvent = TypedEvent<[], {}>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type UnpausedEvent = TypedEvent<[], {}>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export type OperatorAddedEvent = TypedEvent<[string], { _operator: string }>;

export type OperatorAddedEventFilter = TypedEventFilter<OperatorAddedEvent>;

export type OperatorRemovedEvent = TypedEvent<[string], { _operator: string }>;

export type OperatorRemovedEventFilter = TypedEventFilter<OperatorRemovedEvent>;

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { _oldAdmin: string; _newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type AdminRemovedEvent = TypedEvent<[string], { _oldAdmin: string }>;

export type AdminRemovedEventFilter = TypedEventFilter<AdminRemovedEvent>;

export interface RoninRewardDistributor extends BaseContract {
  contractName: "RoninRewardDistributor";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RoninRewardDistributorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addRewardToken(
      _rewardId: BigNumberish,
      _tokenAddress: string,
      _conversionRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    withdrawEther(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { tokenAddress: string; conversionRate: BigNumber }
    >;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    operator(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    addOperators(
      _addedOperators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      _owner: string,
      _rewardId: BigNumberish,
      _amount: BigNumberish,
      _createdAt: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeOperators(
      _removedOperators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    operators(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getClaimed(
      _owner: string,
      _rewardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _amount: BigNumber; _createdAt: BigNumber }
    >;

    admin(overrides?: CallOverrides): Promise<[string]>;
  };

  addRewardToken(
    _rewardId: BigNumberish,
    _tokenAddress: string,
    _conversionRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  withdrawEther(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardMap(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { tokenAddress: string; conversionRate: BigNumber }
  >;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawToken(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeAdmin(
    _newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeAdmin(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  operator(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  addOperators(
    _addedOperators: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    _owner: string,
    _rewardId: BigNumberish,
    _amount: BigNumberish,
    _createdAt: BigNumberish,
    _signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeOperators(
    _removedOperators: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  operators(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getClaimed(
    _owner: string,
    _rewardId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _amount: BigNumber; _createdAt: BigNumber }
  >;

  admin(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addRewardToken(
      _rewardId: BigNumberish,
      _tokenAddress: string,
      _conversionRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    withdrawEther(overrides?: CallOverrides): Promise<void>;

    rewardMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { tokenAddress: string; conversionRate: BigNumber }
    >;

    pause(overrides?: CallOverrides): Promise<void>;

    withdrawToken(_token: string, overrides?: CallOverrides): Promise<void>;

    changeAdmin(_newAdmin: string, overrides?: CallOverrides): Promise<void>;

    removeAdmin(overrides?: CallOverrides): Promise<void>;

    operator(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    addOperators(
      _addedOperators: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    claim(
      _owner: string,
      _rewardId: BigNumberish,
      _amount: BigNumberish,
      _createdAt: BigNumberish,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeOperators(
      _removedOperators: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    operators(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getClaimed(
      _owner: string,
      _rewardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _amount: BigNumber; _createdAt: BigNumber }
    >;

    admin(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "RewardClaimed(address,uint256,uint256)"(
      _owner?: string | null,
      _rewardId?: BigNumberish | null,
      _total?: BigNumberish | null
    ): RewardClaimedEventFilter;
    RewardClaimed(
      _owner?: string | null,
      _rewardId?: BigNumberish | null,
      _total?: BigNumberish | null
    ): RewardClaimedEventFilter;

    "Paused()"(): PausedEventFilter;
    Paused(): PausedEventFilter;

    "Unpaused()"(): UnpausedEventFilter;
    Unpaused(): UnpausedEventFilter;

    "OperatorAdded(address)"(
      _operator?: string | null
    ): OperatorAddedEventFilter;
    OperatorAdded(_operator?: string | null): OperatorAddedEventFilter;

    "OperatorRemoved(address)"(
      _operator?: string | null
    ): OperatorRemovedEventFilter;
    OperatorRemoved(_operator?: string | null): OperatorRemovedEventFilter;

    "AdminChanged(address,address)"(
      _oldAdmin?: string | null,
      _newAdmin?: string | null
    ): AdminChangedEventFilter;
    AdminChanged(
      _oldAdmin?: string | null,
      _newAdmin?: string | null
    ): AdminChangedEventFilter;

    "AdminRemoved(address)"(_oldAdmin?: string | null): AdminRemovedEventFilter;
    AdminRemoved(_oldAdmin?: string | null): AdminRemovedEventFilter;
  };

  estimateGas: {
    addRewardToken(
      _rewardId: BigNumberish,
      _tokenAddress: string,
      _conversionRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawEther(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    operator(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    addOperators(
      _addedOperators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      _owner: string,
      _rewardId: BigNumberish,
      _amount: BigNumberish,
      _createdAt: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeOperators(
      _removedOperators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    operators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimed(
      _owner: string,
      _rewardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addRewardToken(
      _rewardId: BigNumberish,
      _tokenAddress: string,
      _conversionRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawEther(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    operator(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addOperators(
      _addedOperators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      _owner: string,
      _rewardId: BigNumberish,
      _amount: BigNumberish,
      _createdAt: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeOperators(
      _removedOperators: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    operators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimed(
      _owner: string,
      _rewardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
