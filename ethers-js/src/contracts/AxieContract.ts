/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace AxieGenetics {
  export type GenesStruct = { x: BigNumberish; y: BigNumberish };

  export type GenesStructOutput = [BigNumber, BigNumber] & {
    x: BigNumber;
    y: BigNumber;
  };
}

export declare namespace IAxie {
  export type AxieStruct = {
    sireId: BigNumberish;
    matronId: BigNumberish;
    birthDate: BigNumberish;
    genes: AxieGenetics.GenesStruct;
    breedCount: BigNumberish;
    level: BigNumberish;
  };

  export type AxieStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    AxieGenetics.GenesStructOutput,
    number,
    number
  ] & {
    sireId: BigNumber;
    matronId: BigNumber;
    birthDate: BigNumber;
    genes: AxieGenetics.GenesStructOutput;
    breedCount: number;
    level: number;
  };

  export type AxieggStruct = {
    sireGenes: AxieGenetics.GenesStruct;
    matronGenes: AxieGenetics.GenesStruct;
  };

  export type AxieggStructOutput = [
    AxieGenetics.GenesStructOutput,
    AxieGenetics.GenesStructOutput
  ] & {
    sireGenes: AxieGenetics.GenesStructOutput;
    matronGenes: AxieGenetics.GenesStructOutput;
  };
}

export interface AxieContractInterface extends utils.Interface {
  contractName: "AxieContract";
  functions: {
    "addMinters(address[])": FunctionFragment;
    "addSeeders(address[])": FunctionFragment;
    "admin()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "areAxiesEligibleForPairing(uint256,uint256)": FunctionFragment;
    "axie(uint256)": FunctionFragment;
    "axieBreedLimit()": FunctionFragment;
    "axiegg(uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseTokenURI()": FunctionFragment;
    "batchMintAxieggs(uint256[],bytes[],bytes[],address)": FunctionFragment;
    "batchMintAxies(uint256[],bytes[],address)": FunctionFragment;
    "breedAxies(uint256,uint256)": FunctionFragment;
    "breedingFee()": FunctionFragment;
    "breedingFeeToken()": FunctionFragment;
    "breedingPotion()": FunctionFragment;
    "changeAdmin(address)": FunctionFragment;
    "currentAxieId()": FunctionFragment;
    "evolveAxie(uint256,(uint256,uint256))": FunctionFragment;
    "geneBrewerContract()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getRequirementsForBreeding(uint256)": FunctionFragment;
    "growAxieggToAdult(uint256,uint256)": FunctionFragment;
    "hoppingAxieId(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isAuthorized(address,uint256,bytes4)": FunctionFragment;
    "isFunctionOperatorOfToken(uint256,address,bytes4)": FunctionFragment;
    "isMinter(address)": FunctionFragment;
    "isPermissionSet(address,address,bytes4)": FunctionFragment;
    "isPermissionSetAll(address,address)": FunctionFragment;
    "isTokenOperator(uint256,address)": FunctionFragment;
    "mintAxie(address,(uint256,uint256,uint256,(uint256,uint256),uint8,uint16))": FunctionFragment;
    "mintPromoAxie(uint256,uint256,(uint256,uint256,uint256,(uint256,uint256),uint8,uint16),address)": FunctionFragment;
    "minter(address)": FunctionFragment;
    "minters(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "neededPotionForBreeding(uint256)": FunctionFragment;
    "nonces(uint256)": FunctionFragment;
    "operatorPermission(address,address,bytes4)": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "preExecutionLogicContract()": FunctionFragment;
    "removeAdmin()": FunctionFragment;
    "removeMinters(address[])": FunctionFragment;
    "removeSeeders(address[])": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "seeder(address)": FunctionFragment;
    "seeders(uint256)": FunctionFragment;
    "setAdultDuration(uint256)": FunctionFragment;
    "setAllPermissionFor(address,bool)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setAxieBreedLimit(uint8)": FunctionFragment;
    "setBaseTokenURI(string)": FunctionFragment;
    "setBreedingFee(uint256)": FunctionFragment;
    "setBreedingFeeToken(address)": FunctionFragment;
    "setBreedingPotionContract(address)": FunctionFragment;
    "setCurrentAxieId(uint256)": FunctionFragment;
    "setFunctionOperatorForToken(uint256,address,bytes4,bool)": FunctionFragment;
    "setGeneBrewerContract(address)": FunctionFragment;
    "setHoppingAxieIds(uint256[],uint256[])": FunctionFragment;
    "setNeededPotionForBreeding(uint256[])": FunctionFragment;
    "setPermissionFor(address,bytes4,bool)": FunctionFragment;
    "setPreExecutionLogicContract(address)": FunctionFragment;
    "setTokenOperator(uint256,address,bool)": FunctionFragment;
    "setTokenReceiver(address)": FunctionFragment;
    "stageOf(uint256)": FunctionFragment;
    "stateOf(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "toAdultDuration()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenPermission(uint256,address,bytes4)": FunctionFragment;
    "tokenPermissionInfos(uint256,uint256)": FunctionFragment;
    "tokenReceiver()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
    "unwhitelist(address)": FunctionFragment;
    "whitelist(address)": FunctionFragment;
    "whitelisted(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addMinters",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addSeeders",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "areAxiesEligibleForPairing",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "axie", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "axieBreedLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "axiegg",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "baseTokenURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchMintAxieggs",
    values: [BigNumberish[], BytesLike[], BytesLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "batchMintAxies",
    values: [BigNumberish[], BytesLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "breedAxies",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "breedingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "breedingFeeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "breedingPotion",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "changeAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "currentAxieId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "evolveAxie",
    values: [BigNumberish, AxieGenetics.GenesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "geneBrewerContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequirementsForBreeding",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "growAxieggToAdult",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hoppingAxieId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isFunctionOperatorOfToken",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "isMinter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isPermissionSet",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPermissionSetAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenOperator",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAxie",
    values: [string, IAxie.AxieStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "mintPromoAxie",
    values: [BigNumberish, BigNumberish, IAxie.AxieStruct, string]
  ): string;
  encodeFunctionData(functionFragment: "minter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "minters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "neededPotionForBreeding",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorPermission",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "preExecutionLogicContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeMinters",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSeeders",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "seeder", values: [string]): string;
  encodeFunctionData(
    functionFragment: "seeders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdultDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllPermissionFor",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAxieBreedLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseTokenURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBreedingFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBreedingFeeToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBreedingPotionContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentAxieId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFunctionOperatorForToken",
    values: [BigNumberish, string, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setGeneBrewerContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setHoppingAxieIds",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setNeededPotionForBreeding",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermissionFor",
    values: [string, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPreExecutionLogicContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenOperator",
    values: [BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenReceiver",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stageOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stateOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toAdultDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenPermission",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenPermissionInfos",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "unwhitelist", values: [string]): string;
  encodeFunctionData(functionFragment: "whitelist", values: [string]): string;
  encodeFunctionData(functionFragment: "whitelisted", values: [string]): string;

  decodeFunctionResult(functionFragment: "addMinters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addSeeders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "areAxiesEligibleForPairing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "axie", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "axieBreedLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "axiegg", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchMintAxieggs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchMintAxies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "breedAxies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "breedingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "breedingFeeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "breedingPotion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentAxieId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "evolveAxie", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "geneBrewerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequirementsForBreeding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "growAxieggToAdult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hoppingAxieId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFunctionOperatorOfToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMinter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPermissionSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPermissionSetAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintAxie", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintPromoAxie",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "neededPotionForBreeding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "operatorPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "preExecutionLogicContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMinters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSeeders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seeder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "seeders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAdultDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllPermissionFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAxieBreedLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBreedingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBreedingFeeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBreedingPotionContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentAxieId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFunctionOperatorForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGeneBrewerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHoppingAxieIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNeededPotionForBreeding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermissionFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPreExecutionLogicContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stageOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stateOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toAdultDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenPermissionInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unwhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelisted",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "AdminRemoved(address)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "AxieEvolved(uint256,tuple)": EventFragment;
    "AxieSpawn(uint256)": EventFragment;
    "AxieggMinted(uint256,tuple,tuple)": EventFragment;
    "MinterAdded(address)": EventFragment;
    "MinterRemoved(address)": EventFragment;
    "NonceUpdated(uint256,uint256)": EventFragment;
    "Paused()": EventFragment;
    "PermissionSet(address,address,bytes4,bool)": EventFragment;
    "PermissionSetAll(address,address,bool)": EventFragment;
    "SeederAdded(address)": EventFragment;
    "SeederRemoved(address)": EventFragment;
    "SpenderUnwhitelisted(address)": EventFragment;
    "SpenderWhitelisted(address)": EventFragment;
    "TokenOperatorSet(uint256,address,bool)": EventFragment;
    "TokenPermissionSet(uint256,address,bytes4,bool)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unpaused()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AxieEvolved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AxieSpawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AxieggMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinterAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinterRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NonceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PermissionSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PermissionSetAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SeederAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SeederRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SpenderUnwhitelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SpenderWhitelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenOperatorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenPermissionSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { _oldAdmin: string; _newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type AdminRemovedEvent = TypedEvent<[string], { _oldAdmin: string }>;

export type AdminRemovedEventFilter = TypedEventFilter<AdminRemovedEvent>;

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { _owner: string; _approved: string; _tokenId: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { _owner: string; _operator: string; _approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type AxieEvolvedEvent = TypedEvent<
  [BigNumber, AxieGenetics.GenesStructOutput],
  { _axieId: BigNumber; _genes: AxieGenetics.GenesStructOutput }
>;

export type AxieEvolvedEventFilter = TypedEventFilter<AxieEvolvedEvent>;

export type AxieSpawnEvent = TypedEvent<[BigNumber], { _axieId: BigNumber }>;

export type AxieSpawnEventFilter = TypedEventFilter<AxieSpawnEvent>;

export type AxieggMintedEvent = TypedEvent<
  [BigNumber, IAxie.AxieStructOutput, IAxie.AxieggStructOutput],
  {
    _axieId: BigNumber;
    _axie: IAxie.AxieStructOutput;
    _axiegg: IAxie.AxieggStructOutput;
  }
>;

export type AxieggMintedEventFilter = TypedEventFilter<AxieggMintedEvent>;

export type MinterAddedEvent = TypedEvent<[string], { _minter: string }>;

export type MinterAddedEventFilter = TypedEventFilter<MinterAddedEvent>;

export type MinterRemovedEvent = TypedEvent<[string], { _minter: string }>;

export type MinterRemovedEventFilter = TypedEventFilter<MinterRemovedEvent>;

export type NonceUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { _tokenId: BigNumber; _nonce: BigNumber }
>;

export type NonceUpdatedEventFilter = TypedEventFilter<NonceUpdatedEvent>;

export type PausedEvent = TypedEvent<[], {}>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type PermissionSetEvent = TypedEvent<
  [string, string, string, boolean],
  { _owner: string; _operator: string; _funcSig: string; _approved: boolean }
>;

export type PermissionSetEventFilter = TypedEventFilter<PermissionSetEvent>;

export type PermissionSetAllEvent = TypedEvent<
  [string, string, boolean],
  { _owner: string; _operator: string; _approved: boolean }
>;

export type PermissionSetAllEventFilter =
  TypedEventFilter<PermissionSetAllEvent>;

export type SeederAddedEvent = TypedEvent<[string], { _seeder: string }>;

export type SeederAddedEventFilter = TypedEventFilter<SeederAddedEvent>;

export type SeederRemovedEvent = TypedEvent<[string], { _seeder: string }>;

export type SeederRemovedEventFilter = TypedEventFilter<SeederRemovedEvent>;

export type SpenderUnwhitelistedEvent = TypedEvent<
  [string],
  { _spender: string }
>;

export type SpenderUnwhitelistedEventFilter =
  TypedEventFilter<SpenderUnwhitelistedEvent>;

export type SpenderWhitelistedEvent = TypedEvent<
  [string],
  { _spender: string }
>;

export type SpenderWhitelistedEventFilter =
  TypedEventFilter<SpenderWhitelistedEvent>;

export type TokenOperatorSetEvent = TypedEvent<
  [BigNumber, string, boolean],
  { _tokenId: BigNumber; _operator: string; _approved: boolean }
>;

export type TokenOperatorSetEventFilter =
  TypedEventFilter<TokenOperatorSetEvent>;

export type TokenPermissionSetEvent = TypedEvent<
  [BigNumber, string, string, boolean],
  {
    _tokenId: BigNumber;
    _operator: string;
    _funcSig: string;
    _approved: boolean;
  }
>;

export type TokenPermissionSetEventFilter =
  TypedEventFilter<TokenPermissionSetEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { _from: string; _to: string; _tokenId: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type UnpausedEvent = TypedEvent<[], {}>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface AxieContract extends BaseContract {
  contractName: "AxieContract";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AxieContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addMinters(
      _addedMinters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSeeders(
      _addedSeeders: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    approve(
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    areAxiesEligibleForPairing(
      _sireId: BigNumberish,
      _matronId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    axie(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        AxieGenetics.GenesStructOutput,
        number,
        number
      ] & {
        sireId: BigNumber;
        matronId: BigNumber;
        birthDate: BigNumber;
        genes: AxieGenetics.GenesStructOutput;
        breedCount: number;
        level: number;
      }
    >;

    axieBreedLimit(overrides?: CallOverrides): Promise<[number]>;

    axiegg(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [AxieGenetics.GenesStructOutput, AxieGenetics.GenesStructOutput] & {
        sireGenes: AxieGenetics.GenesStructOutput;
        matronGenes: AxieGenetics.GenesStructOutput;
      }
    >;

    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _balance: BigNumber }>;

    baseTokenURI(overrides?: CallOverrides): Promise<[string]>;

    batchMintAxieggs(
      _ids: BigNumberish[],
      _axiePackages: BytesLike[],
      _axieggPackages: BytesLike[],
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchMintAxies(
      _ids: BigNumberish[],
      _packages: BytesLike[],
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    breedAxies(
      _sireId: BigNumberish,
      _matronId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    breedingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    breedingFeeToken(overrides?: CallOverrides): Promise<[string]>;

    breedingPotion(overrides?: CallOverrides): Promise<[string]>;

    changeAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentAxieId(overrides?: CallOverrides): Promise<[BigNumber]>;

    evolveAxie(
      _axieId: BigNumberish,
      _genes: AxieGenetics.GenesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    geneBrewerContract(overrides?: CallOverrides): Promise<[string]>;

    getApproved(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRequirementsForBreeding(
      _axieId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    growAxieggToAdult(
      _axieId: BigNumberish,
      _seed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hoppingAxieId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isApprovedForAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _approved: boolean }>;

    isAuthorized(
      _operator: string,
      _tokenId: BigNumberish,
      _funcSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isFunctionOperatorOfToken(
      _tokenId: BigNumberish,
      _operator: string,
      _funcSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMinter(_addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isPermissionSet(
      _owner: string,
      _operator: string,
      _funcSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPermissionSetAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTokenOperator(
      _tokenId: BigNumberish,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintAxie(
      _to: string,
      _axie: IAxie.AxieStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintPromoAxie(
      _axieId: BigNumberish,
      _hoppingAxieId: BigNumberish,
      _axie: IAxie.AxieStruct,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minter(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    minters(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    neededPotionForBreeding(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nonces(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    operatorPermission(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ownerOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { _owner: string }>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    preExecutionLogicContract(overrides?: CallOverrides): Promise<[string]>;

    removeAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeMinters(
      _removedMinters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSeeders(
      _removedSeeders: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    seeder(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    seeders(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    setAdultDuration(
      _toAdultDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAllPermissionFor(
      _operator: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      _operator: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAxieBreedLimit(
      _axieBreedLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseTokenURI(
      _baseTokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBreedingFee(
      _breedingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBreedingFeeToken(
      _breedingFeeToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBreedingPotionContract(
      _breedingPotion: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCurrentAxieId(
      _currentAxieId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFunctionOperatorForToken(
      _tokenId: BigNumberish,
      _operator: string,
      _funcSig: BytesLike,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGeneBrewerContract(
      _geneBrewerContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHoppingAxieIds(
      _axieIds: BigNumberish[],
      _hoppingAxieIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNeededPotionForBreeding(
      _neededPotionForBreeding: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPermissionFor(
      _operator: string,
      _funcSig: BytesLike,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPreExecutionLogicContract(
      _preExecutionLogicContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenOperator(
      _tokenId: BigNumberish,
      _operator: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenReceiver(
      _tokenReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stageOf(
      _axieId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    stateOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _supported: boolean }>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    toAdultDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _tokenId: BigNumber }>;

    tokenOfOwnerByIndex(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _tokenId: BigNumber }>;

    tokenPermission(
      arg0: BigNumberish,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokenPermissionInfos(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { operator: string; funcSig: string }>;

    tokenReceiver(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { _uri: string }>;

    totalSupply(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _supply: BigNumber }>;

    transferFrom(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unwhitelist(
      _spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelist(
      _spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelisted(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  addMinters(
    _addedMinters: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSeeders(
    _addedSeeders: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  approve(
    _to: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  areAxiesEligibleForPairing(
    _sireId: BigNumberish,
    _matronId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  axie(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      AxieGenetics.GenesStructOutput,
      number,
      number
    ] & {
      sireId: BigNumber;
      matronId: BigNumber;
      birthDate: BigNumber;
      genes: AxieGenetics.GenesStructOutput;
      breedCount: number;
      level: number;
    }
  >;

  axieBreedLimit(overrides?: CallOverrides): Promise<number>;

  axiegg(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [AxieGenetics.GenesStructOutput, AxieGenetics.GenesStructOutput] & {
      sireGenes: AxieGenetics.GenesStructOutput;
      matronGenes: AxieGenetics.GenesStructOutput;
    }
  >;

  balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  baseTokenURI(overrides?: CallOverrides): Promise<string>;

  batchMintAxieggs(
    _ids: BigNumberish[],
    _axiePackages: BytesLike[],
    _axieggPackages: BytesLike[],
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchMintAxies(
    _ids: BigNumberish[],
    _packages: BytesLike[],
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  breedAxies(
    _sireId: BigNumberish,
    _matronId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  breedingFee(overrides?: CallOverrides): Promise<BigNumber>;

  breedingFeeToken(overrides?: CallOverrides): Promise<string>;

  breedingPotion(overrides?: CallOverrides): Promise<string>;

  changeAdmin(
    _newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentAxieId(overrides?: CallOverrides): Promise<BigNumber>;

  evolveAxie(
    _axieId: BigNumberish,
    _genes: AxieGenetics.GenesStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  geneBrewerContract(overrides?: CallOverrides): Promise<string>;

  getApproved(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRequirementsForBreeding(
    _axieId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  growAxieggToAdult(
    _axieId: BigNumberish,
    _seed: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hoppingAxieId(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isApprovedForAll(
    _owner: string,
    _operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAuthorized(
    _operator: string,
    _tokenId: BigNumberish,
    _funcSig: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isFunctionOperatorOfToken(
    _tokenId: BigNumberish,
    _operator: string,
    _funcSig: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMinter(_addr: string, overrides?: CallOverrides): Promise<boolean>;

  isPermissionSet(
    _owner: string,
    _operator: string,
    _funcSig: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPermissionSetAll(
    _owner: string,
    _operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTokenOperator(
    _tokenId: BigNumberish,
    _operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintAxie(
    _to: string,
    _axie: IAxie.AxieStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintPromoAxie(
    _axieId: BigNumberish,
    _hoppingAxieId: BigNumberish,
    _axie: IAxie.AxieStruct,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minter(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  minters(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  neededPotionForBreeding(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nonces(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  operatorPermission(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ownerOf(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  preExecutionLogicContract(overrides?: CallOverrides): Promise<string>;

  removeAdmin(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeMinters(
    _removedMinters: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeSeeders(
    _removedSeeders: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    _from: string,
    _to: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    _from: string,
    _to: string,
    _tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  seeder(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  seeders(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  setAdultDuration(
    _toAdultDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAllPermissionFor(
    _operator: string,
    _approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    _operator: string,
    _approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAxieBreedLimit(
    _axieBreedLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseTokenURI(
    _baseTokenURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBreedingFee(
    _breedingFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBreedingFeeToken(
    _breedingFeeToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBreedingPotionContract(
    _breedingPotion: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCurrentAxieId(
    _currentAxieId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFunctionOperatorForToken(
    _tokenId: BigNumberish,
    _operator: string,
    _funcSig: BytesLike,
    _approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGeneBrewerContract(
    _geneBrewerContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHoppingAxieIds(
    _axieIds: BigNumberish[],
    _hoppingAxieIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNeededPotionForBreeding(
    _neededPotionForBreeding: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPermissionFor(
    _operator: string,
    _funcSig: BytesLike,
    _approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPreExecutionLogicContract(
    _preExecutionLogicContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenOperator(
    _tokenId: BigNumberish,
    _operator: string,
    _approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenReceiver(
    _tokenReceiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stageOf(_axieId: BigNumberish, overrides?: CallOverrides): Promise<number>;

  stateOf(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    _interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  toAdultDuration(overrides?: CallOverrides): Promise<BigNumber>;

  tokenByIndex(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    _owner: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenPermission(
    arg0: BigNumberish,
    arg1: string,
    arg2: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokenPermissionInfos(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { operator: string; funcSig: string }>;

  tokenReceiver(overrides?: CallOverrides): Promise<string>;

  tokenURI(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    _from: string,
    _to: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unwhitelist(
    _spender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelist(
    _spender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelisted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    addMinters(
      _addedMinters: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    addSeeders(
      _addedSeeders: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    approve(
      _to: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    areAxiesEligibleForPairing(
      _sireId: BigNumberish,
      _matronId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    axie(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        AxieGenetics.GenesStructOutput,
        number,
        number
      ] & {
        sireId: BigNumber;
        matronId: BigNumber;
        birthDate: BigNumber;
        genes: AxieGenetics.GenesStructOutput;
        breedCount: number;
        level: number;
      }
    >;

    axieBreedLimit(overrides?: CallOverrides): Promise<number>;

    axiegg(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [AxieGenetics.GenesStructOutput, AxieGenetics.GenesStructOutput] & {
        sireGenes: AxieGenetics.GenesStructOutput;
        matronGenes: AxieGenetics.GenesStructOutput;
      }
    >;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseTokenURI(overrides?: CallOverrides): Promise<string>;

    batchMintAxieggs(
      _ids: BigNumberish[],
      _axiePackages: BytesLike[],
      _axieggPackages: BytesLike[],
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    batchMintAxies(
      _ids: BigNumberish[],
      _packages: BytesLike[],
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    breedAxies(
      _sireId: BigNumberish,
      _matronId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    breedingFee(overrides?: CallOverrides): Promise<BigNumber>;

    breedingFeeToken(overrides?: CallOverrides): Promise<string>;

    breedingPotion(overrides?: CallOverrides): Promise<string>;

    changeAdmin(_newAdmin: string, overrides?: CallOverrides): Promise<void>;

    currentAxieId(overrides?: CallOverrides): Promise<BigNumber>;

    evolveAxie(
      _axieId: BigNumberish,
      _genes: AxieGenetics.GenesStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    geneBrewerContract(overrides?: CallOverrides): Promise<string>;

    getApproved(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRequirementsForBreeding(
      _axieId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    growAxieggToAdult(
      _axieId: BigNumberish,
      _seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    hoppingAxieId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAuthorized(
      _operator: string,
      _tokenId: BigNumberish,
      _funcSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isFunctionOperatorOfToken(
      _tokenId: BigNumberish,
      _operator: string,
      _funcSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMinter(_addr: string, overrides?: CallOverrides): Promise<boolean>;

    isPermissionSet(
      _owner: string,
      _operator: string,
      _funcSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPermissionSetAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTokenOperator(
      _tokenId: BigNumberish,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintAxie(
      _to: string,
      _axie: IAxie.AxieStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintPromoAxie(
      _axieId: BigNumberish,
      _hoppingAxieId: BigNumberish,
      _axie: IAxie.AxieStruct,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    minter(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    minters(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    neededPotionForBreeding(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonces(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    operatorPermission(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ownerOf(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    preExecutionLogicContract(overrides?: CallOverrides): Promise<string>;

    removeAdmin(overrides?: CallOverrides): Promise<void>;

    removeMinters(
      _removedMinters: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeSeeders(
      _removedSeeders: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    seeder(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    seeders(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    setAdultDuration(
      _toAdultDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAllPermissionFor(
      _operator: string,
      _approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      _operator: string,
      _approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setAxieBreedLimit(
      _axieBreedLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseTokenURI(
      _baseTokenURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBreedingFee(
      _breedingFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBreedingFeeToken(
      _breedingFeeToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBreedingPotionContract(
      _breedingPotion: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCurrentAxieId(
      _currentAxieId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFunctionOperatorForToken(
      _tokenId: BigNumberish,
      _operator: string,
      _funcSig: BytesLike,
      _approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setGeneBrewerContract(
      _geneBrewerContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setHoppingAxieIds(
      _axieIds: BigNumberish[],
      _hoppingAxieIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setNeededPotionForBreeding(
      _neededPotionForBreeding: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setPermissionFor(
      _operator: string,
      _funcSig: BytesLike,
      _approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setPreExecutionLogicContract(
      _preExecutionLogicContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenOperator(
      _tokenId: BigNumberish,
      _operator: string,
      _approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenReceiver(
      _tokenReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stageOf(_axieId: BigNumberish, overrides?: CallOverrides): Promise<number>;

    stateOf(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    toAdultDuration(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenPermission(
      arg0: BigNumberish,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenPermissionInfos(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { operator: string; funcSig: string }>;

    tokenReceiver(overrides?: CallOverrides): Promise<string>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    unwhitelist(_spender: string, overrides?: CallOverrides): Promise<void>;

    whitelist(_spender: string, overrides?: CallOverrides): Promise<void>;

    whitelisted(arg0: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "AdminChanged(address,address)"(
      _oldAdmin?: string | null,
      _newAdmin?: string | null
    ): AdminChangedEventFilter;
    AdminChanged(
      _oldAdmin?: string | null,
      _newAdmin?: string | null
    ): AdminChangedEventFilter;

    "AdminRemoved(address)"(_oldAdmin?: string | null): AdminRemovedEventFilter;
    AdminRemoved(_oldAdmin?: string | null): AdminRemovedEventFilter;

    "Approval(address,address,uint256)"(
      _owner?: string | null,
      _approved?: string | null,
      _tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      _owner?: string | null,
      _approved?: string | null,
      _tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      _owner?: string | null,
      _operator?: string | null,
      _approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      _owner?: string | null,
      _operator?: string | null,
      _approved?: null
    ): ApprovalForAllEventFilter;

    "AxieEvolved(uint256,tuple)"(
      _axieId?: BigNumberish | null,
      _genes?: null
    ): AxieEvolvedEventFilter;
    AxieEvolved(
      _axieId?: BigNumberish | null,
      _genes?: null
    ): AxieEvolvedEventFilter;

    "AxieSpawn(uint256)"(_axieId?: BigNumberish | null): AxieSpawnEventFilter;
    AxieSpawn(_axieId?: BigNumberish | null): AxieSpawnEventFilter;

    "AxieggMinted(uint256,tuple,tuple)"(
      _axieId?: BigNumberish | null,
      _axie?: null,
      _axiegg?: null
    ): AxieggMintedEventFilter;
    AxieggMinted(
      _axieId?: BigNumberish | null,
      _axie?: null,
      _axiegg?: null
    ): AxieggMintedEventFilter;

    "MinterAdded(address)"(_minter?: string | null): MinterAddedEventFilter;
    MinterAdded(_minter?: string | null): MinterAddedEventFilter;

    "MinterRemoved(address)"(_minter?: string | null): MinterRemovedEventFilter;
    MinterRemoved(_minter?: string | null): MinterRemovedEventFilter;

    "NonceUpdated(uint256,uint256)"(
      _tokenId?: BigNumberish | null,
      _nonce?: BigNumberish | null
    ): NonceUpdatedEventFilter;
    NonceUpdated(
      _tokenId?: BigNumberish | null,
      _nonce?: BigNumberish | null
    ): NonceUpdatedEventFilter;

    "Paused()"(): PausedEventFilter;
    Paused(): PausedEventFilter;

    "PermissionSet(address,address,bytes4,bool)"(
      _owner?: null,
      _operator?: null,
      _funcSig?: null,
      _approved?: null
    ): PermissionSetEventFilter;
    PermissionSet(
      _owner?: null,
      _operator?: null,
      _funcSig?: null,
      _approved?: null
    ): PermissionSetEventFilter;

    "PermissionSetAll(address,address,bool)"(
      _owner?: null,
      _operator?: null,
      _approved?: null
    ): PermissionSetAllEventFilter;
    PermissionSetAll(
      _owner?: null,
      _operator?: null,
      _approved?: null
    ): PermissionSetAllEventFilter;

    "SeederAdded(address)"(_seeder?: string | null): SeederAddedEventFilter;
    SeederAdded(_seeder?: string | null): SeederAddedEventFilter;

    "SeederRemoved(address)"(_seeder?: string | null): SeederRemovedEventFilter;
    SeederRemoved(_seeder?: string | null): SeederRemovedEventFilter;

    "SpenderUnwhitelisted(address)"(
      _spender?: string | null
    ): SpenderUnwhitelistedEventFilter;
    SpenderUnwhitelisted(
      _spender?: string | null
    ): SpenderUnwhitelistedEventFilter;

    "SpenderWhitelisted(address)"(
      _spender?: string | null
    ): SpenderWhitelistedEventFilter;
    SpenderWhitelisted(_spender?: string | null): SpenderWhitelistedEventFilter;

    "TokenOperatorSet(uint256,address,bool)"(
      _tokenId?: null,
      _operator?: null,
      _approved?: null
    ): TokenOperatorSetEventFilter;
    TokenOperatorSet(
      _tokenId?: null,
      _operator?: null,
      _approved?: null
    ): TokenOperatorSetEventFilter;

    "TokenPermissionSet(uint256,address,bytes4,bool)"(
      _tokenId?: null,
      _operator?: null,
      _funcSig?: null,
      _approved?: null
    ): TokenPermissionSetEventFilter;
    TokenPermissionSet(
      _tokenId?: null,
      _operator?: null,
      _funcSig?: null,
      _approved?: null
    ): TokenPermissionSetEventFilter;

    "Transfer(address,address,uint256)"(
      _from?: string | null,
      _to?: string | null,
      _tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      _from?: string | null,
      _to?: string | null,
      _tokenId?: BigNumberish | null
    ): TransferEventFilter;

    "Unpaused()"(): UnpausedEventFilter;
    Unpaused(): UnpausedEventFilter;
  };

  estimateGas: {
    addMinters(
      _addedMinters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSeeders(
      _addedSeeders: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    areAxiesEligibleForPairing(
      _sireId: BigNumberish,
      _matronId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    axie(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    axieBreedLimit(overrides?: CallOverrides): Promise<BigNumber>;

    axiegg(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseTokenURI(overrides?: CallOverrides): Promise<BigNumber>;

    batchMintAxieggs(
      _ids: BigNumberish[],
      _axiePackages: BytesLike[],
      _axieggPackages: BytesLike[],
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchMintAxies(
      _ids: BigNumberish[],
      _packages: BytesLike[],
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    breedAxies(
      _sireId: BigNumberish,
      _matronId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    breedingFee(overrides?: CallOverrides): Promise<BigNumber>;

    breedingFeeToken(overrides?: CallOverrides): Promise<BigNumber>;

    breedingPotion(overrides?: CallOverrides): Promise<BigNumber>;

    changeAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentAxieId(overrides?: CallOverrides): Promise<BigNumber>;

    evolveAxie(
      _axieId: BigNumberish,
      _genes: AxieGenetics.GenesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    geneBrewerContract(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequirementsForBreeding(
      _axieId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    growAxieggToAdult(
      _axieId: BigNumberish,
      _seed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hoppingAxieId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAuthorized(
      _operator: string,
      _tokenId: BigNumberish,
      _funcSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFunctionOperatorOfToken(
      _tokenId: BigNumberish,
      _operator: string,
      _funcSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMinter(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isPermissionSet(
      _owner: string,
      _operator: string,
      _funcSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPermissionSetAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenOperator(
      _tokenId: BigNumberish,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintAxie(
      _to: string,
      _axie: IAxie.AxieStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintPromoAxie(
      _axieId: BigNumberish,
      _hoppingAxieId: BigNumberish,
      _axie: IAxie.AxieStruct,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minter(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    minters(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    neededPotionForBreeding(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonces(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    operatorPermission(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    preExecutionLogicContract(overrides?: CallOverrides): Promise<BigNumber>;

    removeAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeMinters(
      _removedMinters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeSeeders(
      _removedSeeders: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    seeder(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    seeders(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setAdultDuration(
      _toAdultDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAllPermissionFor(
      _operator: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      _operator: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAxieBreedLimit(
      _axieBreedLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseTokenURI(
      _baseTokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBreedingFee(
      _breedingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBreedingFeeToken(
      _breedingFeeToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBreedingPotionContract(
      _breedingPotion: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCurrentAxieId(
      _currentAxieId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFunctionOperatorForToken(
      _tokenId: BigNumberish,
      _operator: string,
      _funcSig: BytesLike,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGeneBrewerContract(
      _geneBrewerContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHoppingAxieIds(
      _axieIds: BigNumberish[],
      _hoppingAxieIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNeededPotionForBreeding(
      _neededPotionForBreeding: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPermissionFor(
      _operator: string,
      _funcSig: BytesLike,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPreExecutionLogicContract(
      _preExecutionLogicContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenOperator(
      _tokenId: BigNumberish,
      _operator: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenReceiver(
      _tokenReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stageOf(
      _axieId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stateOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    toAdultDuration(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenPermission(
      arg0: BigNumberish,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenPermissionInfos(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unwhitelist(
      _spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelist(
      _spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelisted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addMinters(
      _addedMinters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSeeders(
      _addedSeeders: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    areAxiesEligibleForPairing(
      _sireId: BigNumberish,
      _matronId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    axie(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    axieBreedLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    axiegg(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseTokenURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchMintAxieggs(
      _ids: BigNumberish[],
      _axiePackages: BytesLike[],
      _axieggPackages: BytesLike[],
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchMintAxies(
      _ids: BigNumberish[],
      _packages: BytesLike[],
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    breedAxies(
      _sireId: BigNumberish,
      _matronId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    breedingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    breedingFeeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    breedingPotion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentAxieId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    evolveAxie(
      _axieId: BigNumberish,
      _genes: AxieGenetics.GenesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    geneBrewerContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequirementsForBreeding(
      _axieId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    growAxieggToAdult(
      _axieId: BigNumberish,
      _seed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hoppingAxieId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAuthorized(
      _operator: string,
      _tokenId: BigNumberish,
      _funcSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFunctionOperatorOfToken(
      _tokenId: BigNumberish,
      _operator: string,
      _funcSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMinter(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPermissionSet(
      _owner: string,
      _operator: string,
      _funcSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPermissionSetAll(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenOperator(
      _tokenId: BigNumberish,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintAxie(
      _to: string,
      _axie: IAxie.AxieStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintPromoAxie(
      _axieId: BigNumberish,
      _hoppingAxieId: BigNumberish,
      _axie: IAxie.AxieStruct,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minter(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    neededPotionForBreeding(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonces(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operatorPermission(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    preExecutionLogicContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeMinters(
      _removedMinters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeSeeders(
      _removedSeeders: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    seeder(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    seeders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAdultDuration(
      _toAdultDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAllPermissionFor(
      _operator: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      _operator: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAxieBreedLimit(
      _axieBreedLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseTokenURI(
      _baseTokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBreedingFee(
      _breedingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBreedingFeeToken(
      _breedingFeeToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBreedingPotionContract(
      _breedingPotion: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCurrentAxieId(
      _currentAxieId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFunctionOperatorForToken(
      _tokenId: BigNumberish,
      _operator: string,
      _funcSig: BytesLike,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGeneBrewerContract(
      _geneBrewerContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHoppingAxieIds(
      _axieIds: BigNumberish[],
      _hoppingAxieIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNeededPotionForBreeding(
      _neededPotionForBreeding: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPermissionFor(
      _operator: string,
      _funcSig: BytesLike,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPreExecutionLogicContract(
      _preExecutionLogicContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenOperator(
      _tokenId: BigNumberish,
      _operator: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenReceiver(
      _tokenReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stageOf(
      _axieId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stateOf(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toAdultDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenPermission(
      arg0: BigNumberish,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenPermissionInfos(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unwhitelist(
      _spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelist(
      _spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelisted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
